#!/bin/bash

# Script para destruir TODA a infraestrutura usando Terraform
# Vers√£o melhorada que confia no Terraform para gerenciar todos os recursos

set -e

echo "üóëÔ∏è  Destruindo TODA a infraestrutura com Terraform"
echo "================================================="

# Configura√ß√µes
ENVIRONMENT="dev"
TERRAFORM_DIR="../terraform/environments/${ENVIRONMENT}"

if ! command -v terraform &> /dev/null; then
    echo "‚ùå Terraform n√£o est√° instalado."
    exit 1
fi

cd "$TERRAFORM_DIR"

echo "üìÅ Diret√≥rio: $(pwd)"
echo "üîß Ambiente: $ENVIRONMENT"
echo ""

if [ ! -f "terraform.tfstate" ]; then
    echo "‚ö†Ô∏è  Nenhum estado Terraform encontrado."
    echo "üí° Se existem recursos √≥rf√£os, execute primeiro: ../scripts/import_orphaned_resources.sh"
    exit 1
fi

# Refresh do estado antes de mostrar o plano
echo "üîÑ Atualizando estado do Terraform..."
terraform refresh

# Mostrar recursos que ser√£o destru√≠dos
echo ""
echo "üìã Recursos que ser√£o destru√≠dos:"
terraform plan -destroy

echo ""
echo "‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° DESTRUIR TODOS os recursos!"
echo "    üñ•Ô∏è  EC2 Instance"
echo "    üóÑÔ∏è  RDS Database (dados ser√£o perdidos!)"
echo "    üê≥ ECS Cluster, Service e Task Definition"
echo "    ‚öñÔ∏è  Application Load Balancer"
echo "    üîí Security Groups"
echo "    üë§ IAM Roles"
echo "    üåê NENHUM backup ser√° mantido!"
echo ""
echo "‚úÖ O Terraform ir√° remover TODOS os recursos de forma coordenada"
echo ""

read -p "ü§î Tem certeza que deseja destruir TUDO? Digite 'DESTROY' para confirmar: " -r
echo ""

if [[ $REPLY == "DESTROY" ]]; then
    echo "üóëÔ∏è  Destruindo infraestrutura com Terraform..."
    
    # Para acelerar a destrui√ß√£o, parar servi√ßos ECS antes se existirem
    if terraform output ecs_service_name &>/dev/null; then
        echo "üõë Parando servi√ßo ECS para acelerar destrui√ß√£o..."
        CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "")
        SERVICE_NAME=$(terraform output -raw ecs_service_name 2>/dev/null || echo "")
        
        if [ ! -z "$CLUSTER_NAME" ] && [ ! -z "$SERVICE_NAME" ]; then
            aws ecs update-service \
                --cluster "$CLUSTER_NAME" \
                --service "$SERVICE_NAME" \
                --desired-count 0 \
                --region us-east-1 2>/dev/null || true
            echo "‚úÖ Servi√ßo ECS parado"
        fi
    fi
    
    # Destruir tudo com Terraform
    echo "üí• Executando terraform destroy..."
    terraform destroy -auto-approve
    
    echo ""
    echo "üßπ Limpeza final de task definitions √≥rf√£s..."
    
    # Listar e fazer deregister de task definitions √≥rf√£s
    echo "üîç Procurando task definitions da fam√≠lia api-go-dev-taskdef-app..."
    task_definitions=$(aws ecs list-task-definitions \
        --family-prefix "api-go-dev-taskdef-app" \
        --query "taskDefinitionArns[]" \
        --output text 2>/dev/null || echo "")
    
    if [ ! -z "$task_definitions" ] && [ "$task_definitions" != "None" ]; then
        echo "üìã Task definitions encontradas:"
        echo "$task_definitions" | tr '\t' '\n'
        echo ""
        
        # Fazer deregister de cada task definition
        echo "üóëÔ∏è  Fazendo deregister das task definitions..."
        echo "$task_definitions" | tr '\t' '\n' | while read -r task_def_arn; do
            if [ ! -z "$task_def_arn" ]; then
                task_def_name=$(echo "$task_def_arn" | sed 's/.*\///')
                echo "  üîÑ Deregister: $task_def_name"
                aws ecs deregister-task-definition --task-definition "$task_def_arn" >/dev/null 2>&1 || true
            fi
        done
        
        echo "‚úÖ Deregister conclu√≠do"
        echo ""
        
        # Aguardar um momento para propaga√ß√£o
        echo "‚è≥ Aguardando propaga√ß√£o (5 segundos)..."
        sleep 5
        
        # Verificar se ainda existem task definitions ACTIVE
        active_tasks=$(aws ecs list-task-definitions \
            --family-prefix "api-go-dev-taskdef-app" \
            --status ACTIVE \
            --query "length(taskDefinitionArns[])" \
            --output text 2>/dev/null || echo "0")
        
        inactive_tasks=$(aws ecs list-task-definitions \
            --family-prefix "api-go-dev-taskdef-app" \
            --status INACTIVE \
            --query "length(taskDefinitionArns[])" \
            --output text 2>/dev/null || echo "0")
        
        echo "üìä Status ap√≥s deregister:"
        echo "   ‚Ä¢ Task definitions ACTIVE: $active_tasks"
        echo "   ‚Ä¢ Task definitions INACTIVE: $inactive_tasks"
        
        if [ "$active_tasks" -eq 0 ]; then
            echo "‚úÖ Todas as task definitions foram marcadas como INACTIVE"
        else
            echo "‚ö†Ô∏è  Ainda existem $active_tasks task definitions ACTIVE"
        fi
        
        # Nota: No AWS ECS n√£o √© poss√≠vel deletar task definitions completamente
        # Elas ficam como INACTIVE permanentemente para hist√≥rico
        echo ""
        echo "‚ÑπÔ∏è  NOTA: Task definitions INACTIVE n√£o podem ser deletadas no AWS ECS"
        echo "‚ÑπÔ∏è  Elas ficam como hist√≥rico e n√£o consomem recursos nem geram custos"
        
    else
        echo "‚úÖ Nenhuma task definition √≥rf√£ encontrada"
    fi
    
    echo ""
    echo "‚úÖ TODA A INFRAESTRUTURA FOI DESTRU√çDA PELO TERRAFORM!"
    echo "‚úÖ Nenhum recurso AWS permanece ativo!"
    echo "‚úÖ Custos zerados!"
    echo ""
    echo "üéØ O Terraform removeu todos os recursos de forma coordenada:"
    echo "   ‚Ä¢ Task Definitions foram deregistradas (INACTIVE)"
    echo "   ‚Ä¢ ECS Services foram removidos adequadamente" 
    echo "   ‚Ä¢ Load Balancers foram deletados com depend√™ncias"
    echo "   ‚Ä¢ Security Groups foram removidos na ordem correta"
    echo "   ‚Ä¢ IAM Roles foram limpos automaticamente"
    
else
    echo "‚ùå Opera√ß√£o cancelada. Para destruir, digite exatamente 'DESTROY'."
    exit 1
fi

echo ""
echo "üéâ Destrui√ß√£o completa conclu√≠da com Terraform!"
