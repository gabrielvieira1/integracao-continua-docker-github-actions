name: Deploy to Amazon ECS

on:
  workflow_call:

jobs:
  ECS:
    runs-on: ubuntu-latest
    environment: PROD

    env:
      AWS_REGION: us-east-1
      ALB_NAME: api-go-dev-alb-app
      ECS_CLUSTER_NAME: api-go-dev-ecs-cluster
      ECS_SERVICE_NAME: api-go-dev-ecs-svc-app
      ECS_TASK_FAMILY: api-go-dev-taskdef-app

    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: Configurando credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Criar backup da Task Definition atual para Rollback
        id: task-def-backup
        run: |
          BACKUP_FILE="task-definition-backup-${{ github.run_number }}.json"
          echo "Criando backup em: ${BACKUP_FILE}"
          # Baixa a Task Definition ATUALMENTE em produ√ß√£o
          # Adicionado '|| true' para n√£o falhar se a task def ainda n√£o existir na primeira execu√ß√£o
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} --query taskDefinition > ${BACKUP_FILE} || true
          echo "backup_filename=${BACKUP_FILE}" >> $GITHUB_OUTPUT

      - name: Preencher a nova imagem na Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: Go
          image: ${{ secrets.USERNAME_DOCKER_HUB }}/go_ci:${{ github.run_number }}

      - name: Fazer Deploy da nova Task Definition no ECS
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: Obter o endere√ßo DNS do Load Balancer
        id: get-alb-dns
        run: |
          DNS_NAME=$(aws elbv2 describe-load-balancers --names ${{ env.ALB_NAME }} --region ${{ env.AWS_REGION }} --query "LoadBalancers[0].DNSName" --output text)
          echo "DNS_NAME=${DNS_NAME}" >> $GITHUB_OUTPUT

      - name: Health Check Din√¢mico
        id: health-check
        run: |
          ALB_ADDRESS="${{ steps.get-alb-dns.outputs.DNS_NAME }}"
          HEALTH_CHECK_URL="http://${ALB_ADDRESS}/health"
          echo "Aguardando 30 segundos para estabiliza√ß√£o do servi√ßo..."
          sleep 30
          echo "Executando Health Check em: ${HEALTH_CHECK_URL}"
          if curl -f --connect-timeout 5 --max-time 10 "${HEALTH_CHECK_URL}"; then
            echo "‚úÖ Health Check OK!"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Health Check FALHOU!"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Rollback em caso de falha no Health Check
        if: steps.health-check.outputs.status == 'failure'
        run: |
          echo "üö® Health check falhou! Iniciando rollback..."
          BACKUP_FILE=${{ steps.task-def-backup.outputs.backup_filename }}
          # Verifica se o arquivo de backup realmente existe antes de tentar o rollback
          if [ -f "$BACKUP_FILE" ]; then
            echo "Usando o arquivo de backup: ${BACKUP_FILE}"
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --service ${{ env.ECS_SERVICE_NAME }} \
              --task-definition $(jq -r .taskDefinitionArn ${BACKUP_FILE}) \
              --region ${{ env.AWS_REGION }}
            echo "üî¥ Rollback conclu√≠do."
          else
            echo "‚ö†Ô∏è Arquivo de backup n√£o encontrado. N√£o foi poss√≠vel fazer o rollback."
          fi
          exit 1
