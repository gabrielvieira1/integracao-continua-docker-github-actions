name: Deploy to EKS

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      docker_image_tag:
        required: true
        type: string

jobs:
  deploy-eks:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5"
          terraform_wrapper: false

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.27.0"

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: "5.0.0"

      - name: Deploy Infrastructure
        working-directory: infra/terraform/environments/${{ inputs.environment }}
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Get Infrastructure Outputs
        working-directory: infra/terraform/environments/${{ inputs.environment }}
        id: tf-output
        run: |
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "db_endpoint=$(terraform output -raw db_endpoint)" >> $GITHUB_OUTPUT
          echo "db_port=$(terraform output -raw db_port)" >> $GITHUB_OUTPUT

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region us-east-1 --name ${{ steps.tf-output.outputs.cluster_name }}
          kubectl cluster-info

      - name: Create Namespace
        run: |
          kubectl apply -f infra/k8s/overlays/${{ inputs.environment }}/namespace.yaml

      - name: Create Database Secrets
        env:
          DB_HOST: ${{ steps.tf-output.outputs.db_endpoint }}
          DB_PORT: ${{ steps.tf-output.outputs.db_port }}
          DB_USER: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          kubectl delete secret database-config -n go-api-${{ inputs.environment }} --ignore-not-found
          kubectl create secret generic database-config -n go-api-${{ inputs.environment }} \
            --from-literal=host="$DB_HOST" \
            --from-literal=port="$DB_PORT" \
            --from-literal=username="$DB_USER" \
            --from-literal=password="$DB_PASSWORD" \
            --from-literal=dbname="$DB_NAME"

      - name: Deploy Application
        working-directory: infra/k8s/overlays/${{ inputs.environment }}
        env:
          IMAGE_TAG: ${{ inputs.docker_image_tag }}
        run: |
          kustomize edit set image go-api=${{ secrets.DOCKER_REGISTRY }}/go_ci:$IMAGE_TAG
          kubectl apply -k .

      - name: Wait for Deployment
        run: |
          kubectl rollout status deployment/go-api -n go-api-${{ inputs.environment }} --timeout=300s

      - name: Get Service Info
        run: |
          echo "üåê Service Information:"
          kubectl get svc -n go-api-${{ inputs.environment }}

          echo "üìä Pod Status:"
          kubectl get pods -n go-api-${{ inputs.environment }}

          # Get LoadBalancer URL if available
          LB_URL=$(kubectl get svc go-api-service -n go-api-${{ inputs.environment }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ ! -z "$LB_URL" ]; then
            echo "üöÄ Application URL: http://$LB_URL"
          fi
