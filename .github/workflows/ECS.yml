name: Deploy to Amazon ECS

on:
  workflow_call:

jobs:
  ECS:
    runs-on: ubuntu-latest
    environment: DEV

    env:
      AWS_REGION: us-east-1
      ALB_NAME: api-go-dev-alb-app
      ECS_CLUSTER_NAME: api-go-dev-ecs-cluster
      ECS_SERVICE_NAME: api-go-dev-ecs-svc-app
      ECS_TASK_FAMILY: api-go-dev-taskdef-app

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurando credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Obter a Task Definition atual do ECS
        run: |
          echo "Buscando a Task Definition mais recente da família '${{ env.ECS_TASK_FAMILY }}'..."
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_FAMILY }} \
            --query taskDefinition > task-definition.json
          echo "Task Definition obtida com sucesso."

      - name: Preencher a nova imagem na Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: Go
          image: ${{ secrets.USERNAME_DOCKER_HUB }}/go_ci:${{ github.run_number }}

      - name: Fazer Deploy da nova Task Definition no ECS
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: Obter o endereço DNS do Load Balancer
        id: get-alb-dns
        run: |
          DNS_NAME=$(aws elbv2 describe-load-balancers --names ${{ env.ALB_NAME }} --region ${{ env.AWS_REGION }} --query "LoadBalancers[0].DNSName" --output text)
          echo "DNS_NAME=${DNS_NAME}" >> $GITHUB_OUTPUT

      - name: Health Check da aplicação
        id: health-check
        run: |
          ALB_ADDRESS="${{ steps.get-alb-dns.outputs.DNS_NAME }}"
          HEALTH_CHECK_URL="http://${ALB_ADDRESS}:8000/health"
          echo "Aguardando 60 segundos para estabilização do serviço..."
          sleep 60
          echo "Executando Health Check em: ${HEALTH_CHECK_URL}"

          # Tentar health check com retry
          for i in {1..5}; do
            if curl -f --connect-timeout 10 --max-time 15 "${HEALTH_CHECK_URL}"; then
              echo "✅ Health Check OK! (tentativa $i/5)"
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "❌ Health Check falhou (tentativa $i/5)"
              if [ $i -lt 5 ]; then
                echo "Aguardando 30 segundos antes da próxima tentativa..."
                sleep 30
              fi
            fi
          done

          echo "❌ Health Check falhou após 5 tentativas!"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
