#!/bin/bash

# Script para criar infraestrutura ECS usando Terraform
# Substitui os scripts shell por uma solu√ß√£o em Terraform

set -e

echo "üöÄ Iniciando cria√ß√£o da infraestrutura ECS para API Go"
echo "=================================================="

# Configura√ß√µes
ENVIRONMENT="ecs-dev"
AWS_REGION="us-east-1"
TERRAFORM_DIR="../terraform/environments/${ENVIRONMENT}"

# Verificar se Terraform est√° instalado
if ! command -v terraform &> /dev/null; then
    echo "‚ùå Terraform n√£o est√° instalado. Por favor, instale o Terraform primeiro."
    echo "   Visite: https://developer.hashicorp.com/terraform/downloads"
    exit 1
fi

# Verificar se AWS CLI est√° configurado
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå AWS CLI n√£o est√° configurado. Execute 'aws configure' primeiro."
    exit 1
fi

# Verificar se jq est√° instalado
if ! command -v jq &> /dev/null; then
    echo "‚ùå jq n√£o est√° instalado. Instale com: sudo apt-get install jq"
    exit 1
fi

# Navegar para o diret√≥rio do Terraform
if [ ! -d "$TERRAFORM_DIR" ]; then
    echo "‚ùå Diret√≥rio Terraform n√£o encontrado: $TERRAFORM_DIR"
    exit 1
fi

cd "$TERRAFORM_DIR"

echo "üìÅ Trabalhando no diret√≥rio: $(pwd)"
echo "üîß Ambiente: $ENVIRONMENT"
echo "üåé Regi√£o: $AWS_REGION"
echo ""

# Verificar se existe arquivo terraform.tfvars
if [ ! -f "terraform.tfvars" ]; then
    echo "üìù Criando arquivo terraform.tfvars de exemplo..."
    cat > terraform.tfvars << EOF
# Configura√ß√µes do banco de dados
# Substitua pelos valores reais do seu RDS
db_host     = "api-go-dev-rds-main.XXXXXXX.us-east-1.rds.amazonaws.com"
db_password = "sua_senha_aqui"

# Configura√ß√µes do Docker (ser√° atualizada pelo GitHub Actions)
docker_image = "bielvieira/go_ci:latest"
EOF
    echo "‚ö†Ô∏è  IMPORTANTE: Edite o arquivo terraform.tfvars com os valores corretos!"
    echo "   - db_host: endpoint do seu RDS"
    echo "   - db_password: senha do banco de dados"
    echo ""
    read -p "ü§î Pressione Enter quando tiver editado o terraform.tfvars..."
fi

# Inicializar Terraform
echo "üîÑ Inicializando Terraform..."
terraform init

# Validar configura√ß√£o
echo "‚úÖ Validando configura√ß√£o..."
terraform validate

# Planejar mudan√ßas
echo "üìã Planejando mudan√ßas..."
terraform plan

# Perguntar confirma√ß√£o
echo ""
read -p "ü§î Deseja aplicar essas mudan√ßas? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üöÄ Aplicando mudan√ßas..."
    terraform apply -auto-approve
    
    echo ""
    echo "‚úÖ Infraestrutura ECS criada com sucesso!"
    echo ""
    echo "üìä Informa√ß√µes dos recursos criados:"
    terraform output
    
    # Obter informa√ß√µes importantes
    ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "n√£o dispon√≠vel")
    CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "n√£o dispon√≠vel")
    SERVICE_NAME=$(terraform output -raw ecs_service_name 2>/dev/null || echo "n√£o dispon√≠vel")
    TASK_FAMILY=$(terraform output -raw ecs_task_definition_arn 2>/dev/null | cut -d'/' -f2 | cut -d':' -f1 || echo "n√£o dispon√≠vel")
    
    echo ""
    echo "üåê URLs da aplica√ß√£o:"
    echo "   - Aplica√ß√£o: http://${ALB_DNS}"
    echo "   - Health Check: http://${ALB_DNS}/health"
    echo ""
    echo "üìã Informa√ß√µes para GitHub Actions:"
    echo "   - ECS_CLUSTER_NAME: ${CLUSTER_NAME}"
    echo "   - ECS_SERVICE_NAME: ${SERVICE_NAME}"
    echo "   - ECS_TASK_FAMILY: ${TASK_FAMILY}"
    echo "   - ALB_DNS_NAME: ${ALB_DNS}"
    echo ""
    echo "üîó Para destruir a infraestrutura posteriormente, execute:"
    echo "   cd $TERRAFORM_DIR && terraform destroy"
    
else
    echo "‚ùå Opera√ß√£o cancelada pelo usu√°rio."
    exit 1
fi

echo ""
echo "üéâ Script conclu√≠do!"
